import {
  Bot,
  Context,
  Keyboard,
  NextFunction,
  SessionFlavor,
  session,
} from "grammy";
import dotenv from "dotenv";

dotenv.config();

const TOKEN = process.env.TOKEN;
if (!TOKEN) {
  throw new Error("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞!");
}
const WORKER_EARNS = 2;
const MAX_BALANCE = 100000;

enum BUTTONS {
  EARN = "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å",
  BUY_WORKER = "–ö—É–ø–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞",
  BUY_WORKER_MAX = "–ö—É–ø–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –≤—Å–µ –¥–µ–Ω—å–≥–∏",
  ORDER_TO_WORK = "–û—Ç–¥–∞—Ç—å –ø—Ä–∏–∫–∞–∑ —Ä–∞–±–æ—Ç–∞—Ç—å",
  INFO = "–ò–Ω—Ñ–æ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ",
  HELP = "–°–ø—Ä–∞–≤–∫–∞",
  RESET = "–°–±—Ä–æ—Å –∏–≥—Ä—ã",
}

const START_MESSAGE = `–ü—Ä–∏–≤–µ—Ç\\!

–≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –∏–≥—Ä–∞\\-–∫–ª–∏–∫–µ—Ä –≤ –≤–∏–¥–µ Telegram –±–æ—Ç–∞ –ø—Ä–æ ||~—Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∑–∞ –µ–¥—É~|| –∫–∞—Ä—å–µ—Ä—É —É—Å–ø–µ—à–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–º–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∏—á–∞\\.

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å \\- –Ω–∞–∂–º–∏ *"${BUTTONS.HELP}"*
`;
const HELP_MESSAGE = `–í—ã –ø–µ—Ç—Ä–æ–≤–∏—á\\.

–¶–µ–ª—å –∏–≥—Ä—ã \\- –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å ${MAX_BALANCE} üíµ\\. –ù–∞ —ç—Ç–æ–º –≤—Å–µ, —É –∞–≤—Ç–æ—Ä–∞ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –º–æ–∑–≥–æ–≤ –ø—Ä–∏–¥—É–º–∞—Ç—å —á—Ç–æ\\-—Ç–æ –µ—â—ë\\.

*–ö–Ω–æ–ø–∫–∏*

*"${BUTTONS.EARN}"* \\- –ø–æ–ø–æ–ª–Ω—è–µ—Ç –∫–æ—à–µ–ª–µ–∫ –Ω–∞ 1 üíµ\\.

*"${BUTTONS.BUY_WORKER}"* \\- –∑–∞ 30 üíµ —É –≤–∞—Å –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–Ω–∏–∫ –ø—Ä–∏–Ω–æ—Å—è—â–∏–π ${WORKER_EARNS} üíµ –∑–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "${BUTTONS.ORDER_TO_WORK}"\\.
`;

interface SessionData {
  balance: number;
  workersCount: number;
}

type SessionContext = Context & SessionFlavor<SessionData>;

const bot = new Bot<SessionContext>(TOKEN);

function initial(): SessionData {
  return { balance: 0, workersCount: 0 };
}

function winMiddleware(ctx: SessionContext, next: NextFunction) {
  if (ctx.session.balance >= MAX_BALANCE) {
    ctx.reply("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤ –≤—ã–∏–≥—Ä–∞–ª–∏! –ê —è –Ω–µ —Å—É–º–µ–ª –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–æ–Ω—Ü–æ–≤–∫—É.");
    return;
  }
  next();
}

bot.use(session({ initial }));

// // prettier-ignore
const keyboard = new Keyboard()
  .text(BUTTONS.EARN)
  .text(BUTTONS.BUY_WORKER)
  .row()
  .text(BUTTONS.BUY_WORKER_MAX)
  .text(BUTTONS.ORDER_TO_WORK)
  .row()
  .text(BUTTONS.INFO)
  .text(BUTTONS.HELP)
  .row()
  .text(BUTTONS.RESET);

const handlers = {
  start(ctx: SessionContext) {
    ctx.reply(START_MESSAGE, {
      parse_mode: "MarkdownV2",
      reply_markup: keyboard,
    });
  },
  earn(ctx: SessionContext) {
    ctx.session.balance++;
    ctx.reply(`–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 1 üíµ!`);
  },
  buyWorker(ctx: SessionContext) {
    if (ctx.session.balance < 30) {
      ctx.reply(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ 30, —É –≤–∞—Å ${ctx.session.balance}`);
      return;
    }
    ctx.session.balance -= 30;
    ctx.session.workersCount++;
    ctx.reply(`–í—ã –∫—É–ø–∏–ª–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –∑–∞ 30 üíµ!`);
  },
  buyWorkerMax(ctx: SessionContext) {
    if (ctx.session.balance < 30) {
      ctx.reply(
        `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ 30, —É –≤–∞—Å ${ctx.session.balance}`
      );
      return;
    }

    const numberOfWorkersForBuy = Math.floor(ctx.session.balance / 30);

    ctx.session.balance -= 30 * numberOfWorkersForBuy;
    ctx.session.workersCount += numberOfWorkersForBuy;

    ctx.reply(
      `–í—ã –∫—É–ø–∏–ª–∏ ${numberOfWorkersForBuy} —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –∑–∞ ${
        30 * numberOfWorkersForBuy
      } üíµ!`
    );
  },
  orderToWork(ctx: SessionContext) {
    if (ctx.session.workersCount < 1) {
      ctx.reply("–ù–µ—Ç—É —Ä–∞–±–æ—á–∏—Ö!");
      return;
    }
    ctx.session.balance += ctx.session.workersCount * WORKER_EARNS;
    ctx.reply(`–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${ctx.session.workersCount * WORKER_EARNS} üíµ`);
  },
  info(ctx: SessionContext) {
    const info = `*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ*  
–ë–∞–ª–∞–Ω—Å: ${ctx.session.balance} üíµ  
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö: ${ctx.session.workersCount}
    `;

    ctx.reply(info, {
      parse_mode: "MarkdownV2",
    });
  },
  help(ctx: SessionContext) {
    ctx.reply(HELP_MESSAGE, {
      parse_mode: "MarkdownV2",
    });
  },
  reset(ctx: SessionContext) {
    ctx.session = initial();
    ctx.reply("–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞!");
  },
};

bot.command("start", handlers.start);

bot.hears(BUTTONS.EARN, winMiddleware, handlers.earn);
bot.hears(BUTTONS.BUY_WORKER, winMiddleware, handlers.buyWorker);
bot.hears(BUTTONS.BUY_WORKER_MAX, winMiddleware, handlers.buyWorkerMax);
bot.hears(BUTTONS.ORDER_TO_WORK, winMiddleware, handlers.orderToWork);
bot.hears(BUTTONS.INFO, handlers.info);
bot.hears(BUTTONS.HELP, handlers.help);
bot.hears(BUTTONS.RESET, handlers.reset);

bot.start();
